// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BanubaSdkSimple
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVKit
import Accelerate
@_exported import BanubaSdkSimple
import BanubaUtilities
import CoreMotion
import Foundation
import MediaPlayer
import Metal
import MetalKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum EffectPlayerRenderMode {
  case photo
  case video
  public static func == (a: BanubaSdkSimple.EffectPlayerRenderMode, b: BanubaSdkSimple.EffectPlayerRenderMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EffectPlayerRenderSize {
  public static let hd720x1280: CoreFoundation.CGSize
  public static let hd1080x1920: CoreFoundation.CGSize
}
public enum EffectPlayerVideoSize {
  case uhd3840x2160
  case qhd2560x1440
  case hd1920x1080
  case hd1280x720
  case md960x540
  case default854x480
  public var сaptureSessionPreset: AVFoundation.AVCaptureSession.Preset {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public static func == (a: BanubaSdkSimple.EffectPlayerVideoSize, b: BanubaSdkSimple.EffectPlayerVideoSize) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EffectPlayerConfinguration {
  public let cameraMode: BanubaSdkSimple.CameraSessionType
  public let paths: [Swift.String]
  public var renderSize: CoreFoundation.CGSize
  public var videoSize: BanubaSdkSimple.EffectPlayerVideoSize
  public var shouldAutoStartOnEnterForeground: Swift.Bool
  public var fov: Swift.UInt
  public var isMirrored: Swift.Bool
  public var flipVertically: Swift.Bool
  public var orientation: BanubaSdkSimple.BNBSimpleCameraOrientation
  public var notificationCenter: Foundation.NotificationCenter
  public var logLevel: BanubaSdkSimple.BNBSimpleSeverityLevel
  public var allPaths: [Swift.String] {
    get
  }
  public init(paths: [Swift.String], renderMode: BanubaSdkSimple.EffectPlayerRenderMode, videoSize: BanubaSdkSimple.EffectPlayerVideoSize, orientation: BanubaSdkSimple.BNBSimpleCameraOrientation = .deg0, shouldAutoStartOnEnterForeground: Swift.Bool = true, isMirrored: Swift.Bool = false, fov: Swift.UInt = 0, notificationCenter: Foundation.NotificationCenter = NotificationCenter.default)
  public init(paths: [Swift.String], cameraMode: BanubaSdkSimple.CameraSessionType, renderSize: CoreFoundation.CGSize, videoSize: BanubaSdkSimple.EffectPlayerVideoSize, orientation: BanubaSdkSimple.BNBSimpleCameraOrientation = .deg0, shouldAutoStartOnEnterForeground: Swift.Bool = true, isMirrored: Swift.Bool = false, flipVertically: Swift.Bool = true, fov: Swift.UInt = 0, notificationCenter: Foundation.NotificationCenter = NotificationCenter.default, logLevel: BanubaSdkSimple.BNBSimpleSeverityLevel = .info)
}
@_hasMissingDesignatedInitializers @objc public class WatermarkDrawSettings : ObjectiveC.NSObject {
  final public let translatePos: CoreFoundation.CGPoint
  final public let rotationAngle: CoreFoundation.CGFloat
  final public let drawRect: CoreFoundation.CGRect
  @objc deinit
}
@objc public enum WatermarkCornerPosition : Swift.Int {
  case topLeft
  case topRight
  case bottomRight
  case bottomLeft
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class WatermarkInfo : ObjectiveC.NSObject {
  @objc public init(image: UIKit.UIImage, corner: BanubaSdkSimple.WatermarkCornerPosition, offset: CoreFoundation.CGPoint, targetWidth: CoreFoundation.CGFloat)
  @objc public init(image: UIKit.UIImage, corner: BanubaSdkSimple.WatermarkCornerPosition, offset: CoreFoundation.CGPoint, targetNormalizedWidth: CoreFoundation.CGFloat)
  @objc public init(image: UIKit.UIImage, normalizedPosition: CoreFoundation.CGPoint, targetWidth: CoreFoundation.CGFloat)
  @objc public init(image: UIKit.UIImage, normalizedPosition: CoreFoundation.CGPoint, targetNormalizedWidth: CoreFoundation.CGFloat)
  @objc public func drawSettingsWithBoundsSize(_ boundsSize: CoreFoundation.CGSize, outputSettings: BanubaVideoEditorCore.VEOutputSettings) -> BanubaSdkSimple.WatermarkDrawSettings
  @objc deinit
}
extension BanubaSdkSimple.BNBSimpleTouch {
  convenience public init(_ touch: UIKit.UITouch)
}
public enum RenderBehavior {
  case fullScreen
  case verticalSplitUp
  case verticalSplitDown
  case horizontalSplitLeft
  case horizontalSplitRight
  case pip
  public static func == (a: BanubaSdkSimple.RenderBehavior, b: BanubaSdkSimple.RenderBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PIPShape : AnyObject {
  var size: CoreFoundation.CGSize { get }
  var data: Swift.UnsafeMutablePointer<Swift.UInt8> { get }
}
public protocol PIPShapeable {
  func set(shape: (any BanubaSdkSimple.PIPShape)?)
  func set(shapeType: BanubaSdkSimple.PIPShapeBuilder.PIPShapeType)
}
@_hasMissingDesignatedInitializers public class PIPShapeBuilder {
  public enum PIPShapeType : Swift.Equatable {
    case none
    case oval
    case circle
    case roundRect(radius: CoreFoundation.CGFloat)
    case roundSquare(radius: CoreFoundation.CGFloat)
    public static func == (a: BanubaSdkSimple.PIPShapeBuilder.PIPShapeType, b: BanubaSdkSimple.PIPShapeBuilder.PIPShapeType) -> Swift.Bool
  }
  public static func buildShape(size: CoreFoundation.CGSize, path: CoreGraphics.CGPath) -> any BanubaSdkSimple.PIPShape
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MetalVerticesAndUVData {
  public static let quadVertexData: [Swift.Float]
  public static func quadVertexData(scale: Swift.Float) -> [Swift.Float]
  public static let defaultTextureCoordinates: [Swift.Float]
  @objc deinit
}
extension UIKit.UITouch {
  @_Concurrency.MainActor @preconcurrency public var id: Swift.Int64 {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class PIPShapeDrawer : ObjectiveC.NSObject {
  @objc deinit
}
extension BanubaSdkSimple.PIPShapeDrawer : BanubaSdkSimple.PIPShapeable {
  public func set(shape: (any BanubaSdkSimple.PIPShape)?)
  public func set(shapeType: BanubaSdkSimple.PIPShapeBuilder.PIPShapeType)
}
@objc @_hasMissingDesignatedInitializers public class PIPPlayer : BanubaSdkSimple.PIPShapeDrawer {
  final public let assetNaturalSize: CoreFoundation.CGSize
  public var currentTime: CoreMedia.CMTime {
    get
  }
  public var isPlaying: Swift.Bool {
    get
  }
  public var isReadyToProvideData: Swift.Bool {
    get
  }
  public init(asset: AVFoundation.AVAsset, firstFrameTime: CoreMedia.CMTime)
  @objc deinit
  public func setVolume(_ volume: Swift.Float)
  public func startPlaying()
  public func stopPlaying()
  public func seek(to time: Foundation.TimeInterval)
  public func draw(renderEncoder: any Metal.MTLRenderCommandEncoder, fullRenderSize: CoreFoundation.CGSize, relativeLeftTopPoint: CoreFoundation.CGPoint, scale: CoreFoundation.CGFloat)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@objc public protocol OutputServicing {
  @objc func configureWatermark(_ watermarkInfo: BanubaSdkSimple.WatermarkInfo)
  @objc func takeSnapshot(configuration: BanubaSdkSimple.OutputConfiguration, handler: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc func removeWatermark()
  @objc func startVideoCapturing(fileURL: Foundation.URL?, externalAudioConfiguration: BanubaVideoEditorCore.ExternalAudioConfiguration?, progress: ((CoreMedia.CMTime) -> Swift.Void)?, didStart: (() -> Swift.Void)?, shouldSkipFrame: (() -> Swift.Bool)?, isFirstRun: Swift.Bool, periodicProgressTimeInterval: Foundation.TimeInterval, totalDuration: Foundation.TimeInterval, configuration: BanubaSdkSimple.OutputConfiguration, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc func stopVideoCapturing(cancel: Swift.Bool)
  @objc func startForwardingFrames(handler: @escaping (CoreVideo.CVPixelBuffer) -> Swift.Void)
  @objc func stopForwardingFrames()
  @objc func reset()
  @objc func hasDiskCapacityForRecording() -> Swift.Bool
  @objc func startMuteEffectSoundIfNeeded()
  @objc func stopMuteEffectSound()
  @objc var isRecording: Swift.Bool { get }
  @objc var videoSize: CoreFoundation.CGSize { get set }
  @objc var cropOffsetY: Swift.Int { get set }
}
@objc public class OutputConfiguration : ObjectiveC.NSObject {
  @objc final public let applyWatermark: Swift.Bool
  @objc final public let adjustDeviceOrientation: Swift.Bool
  @objc final public let mirrorFrontCamera: Swift.Bool
  @objc final public let useHEVCCodecIfPossible: Swift.Bool
  @objc public init(applyWatermark: Swift.Bool, adjustDeviceOrientation: Swift.Bool, mirrorFrontCamera: Swift.Bool, useHEVCCodecIfPossible: Swift.Bool)
  @objc public static var defaultConfiguration: BanubaSdkSimple.OutputConfiguration {
    @objc get
  }
  @objc deinit
}
public protocol EffectsServicing {
  var availableShaderEffects: [Swift.String] { get }
  func apply(effect: any BanubaVideoEditorCore.RenderEffect)
  func remove(effect: any BanubaVideoEditorCore.RenderEffect)
  func removeAll()
}
@objc public protocol InputServicing : BanubaSdkSimple.AudioCapturing, BanubaSdkSimple.CameraServicing, BanubaSdkSimple.CameraZoomable {
}
public typealias RotateCameraCallBack = () -> ()
@objc public protocol CameraServicing {
  @objc var delegate: (any BanubaSdkSimple.InputServiceDelegate)? { get set }
  @objc var isFrontCamera: Swift.Bool { get }
  @objc var isPhotoCameraSession: Swift.Bool { get }
  @objc var currentCameraSessionType: BanubaSdkSimple.CameraSessionType { get }
  @objc var exposurePointOfInterest: CoreFoundation.CGPoint { get }
  @objc var flipCamera: Swift.Bool { get set }
  @objc var cameraVideoOutput: AVFoundation.AVCaptureVideoDataOutput? { get }
  @objc func setupCamera()
  @objc func startCamera()
  @objc func stopCamera()
  @objc func releaseAudioCaptureSession()
  @objc func setCameraSessionType(_ type: BanubaSdkSimple.CameraSessionType)
  @objc func setCameraSessionType(_ type: BanubaSdkSimple.CameraSessionType, completion: @escaping BanubaSdkSimple.RotateCameraCallBack)
  @objc func setCameraSessionType(_ type: BanubaSdkSimple.CameraSessionType, zoomFactor: Swift.Float, completion: @escaping BanubaSdkSimple.RotateCameraCallBack)
  @objc func focus(at point: CoreFoundation.CGPoint, useContinuousDetection: Swift.Bool)
  @objc func setTorch(mode: AVFoundation.AVCaptureDevice.TorchMode) -> AVFoundation.AVCaptureDevice.TorchMode
  @objc func toggleTorch() -> AVFoundation.AVCaptureDevice.TorchMode
  @objc func initiatePhotoCapture(cameraSettings: BanubaSdkSimple.CameraPhotoSettings, completion: @escaping (CoreVideo.CVImageBuffer?) -> Swift.Void)
  @objc func switchCamera(to type: BanubaSdkSimple.CameraSessionType, completion: @escaping BanubaSdkSimple.RotateCameraCallBack)
}
@objc public protocol AudioCapturing {
  @objc func startAudioCapturing()
  @objc func stopAudioCapturing()
}
@objc public protocol CameraZoomable {
  @objc var currentFieldOfView: Swift.Float { get }
  @objc var isZoomFactorAdjustable: Swift.Bool { get }
  @objc var minZoomFactor: Swift.Float { get }
  @objc var maxZoomFactor: Swift.Float { get }
  @objc var zoomFactor: Swift.Float { get }
  @objc var defaultZoom: Swift.Float { get }
  @objc func setZoomFactor(_ zoomFactor: Swift.Float) -> Swift.Float
}
@objc public protocol InputServiceDelegate {
  @objc func push(cvBuffer: CoreVideo.CVPixelBuffer)
  @objc func push(cmBuffer: CoreMedia.CMSampleBuffer)
}
@objc public enum CameraSessionType : Swift.Int {
  case FrontCameraVideoSession = 0
  case BackCameraVideoSession = 1
  case FrontCameraPhotoSession = 2
  case BackCameraPhotoSession = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class CameraPhotoSettings : ObjectiveC.NSObject {
  @objc final public let photoQualityPrioritization: AVFoundation.AVCapturePhotoOutput.QualityPrioritization
  @objc final public let flashMode: AVFoundation.AVCaptureDevice.FlashMode
  @objc public init(photoQualityPrioritization: AVFoundation.AVCapturePhotoOutput.QualityPrioritization, flashMode: AVFoundation.AVCaptureDevice.FlashMode)
  @objc deinit
}
extension BanubaSdkSimple.CameraSessionType {
  public var isFrontCamera: Swift.Bool {
    get
  }
  public var isPhotoMode: Swift.Bool {
    get
  }
}
extension BanubaSdkSimple.CameraServicing {
  public func toggleCamera(completion: @escaping BanubaSdkSimple.RotateCameraCallBack)
}
@objc public class BanubaSimpleCameraModule : ObjectiveC.NSObject {
  @objc public var isPIPSession: Swift.Bool
  @objc public var pipVideoURL: Foundation.URL?
  @objc public var pipSwitchSetting: BanubaVideoEditorCore.PIPSwitchLayoutSetting?
  @objc public var pipPlayerSetting: BanubaVideoEditorCore.PIPPlayerLayoutSetting?
  @objc public var pipCameraSetting: BanubaVideoEditorCore.PIPCameraLayoutSetting?
  @objc public var pipVideoContentMode: BanubaVideoEditorCore.PIPVideoContentMode
  public var didStartCaptureFrameHandler: (() -> Swift.Void)?
  @objc public var isLoaded: Swift.Bool
  @objc public var isRenderLoopRunning: Swift.Bool {
    @objc get
  }
  @objc public var isCameraEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var inputDelegate: (any BanubaVideoEditorCore.SDKInputServicingDelegate)?
  final public let videoPreset: AVFoundation.AVCaptureSession.Preset
  final public let useHEVCCodecIfPossible: Swift.Bool
  public static var videoSize: CoreFoundation.CGSize! {
    get
  }
  @objc public init(videoSize: CoreFoundation.CGSize, videoPreset: AVFoundation.AVCaptureSession.Preset, useHEVCCodecIfPossible: Swift.Bool)
  @objc deinit
}
extension BanubaSdkSimple.BanubaSimpleCameraModule {
  @objc dynamic public func rewindPIPPlayer()
  @objc dynamic public func resetPIPPlayerPlayback()
  @objc dynamic public func resumePIPPlayer()
  @objc dynamic public func startPIPPlayer()
  @objc dynamic public func stopPIPPlayer()
  @objc dynamic public func setPIPPlayerVolume(_ volume: Swift.Float)
  @objc dynamic public func setupPIPSession(withVideoURL url: Foundation.URL, playerSetting: BanubaVideoEditorCore.PIPPlayerLayoutSetting, cameraSetting: BanubaVideoEditorCore.PIPCameraLayoutSetting, switchSetting: BanubaVideoEditorCore.PIPSwitchLayoutSetting)
  @objc dynamic public func stopPIPSession()
  @objc dynamic public func startPIPSessionIfNeeded(withSetting setting: BanubaVideoEditorCore.PIPPlayerLayoutSetting, completion: (() -> Swift.Void)?)
  @objc dynamic public func applyVideoContentMode(_ contentMode: BanubaVideoEditorCore.PIPVideoContentMode)
  @objc dynamic public func applyPIPLayoutSetting(_ layoutSettings: BanubaVideoEditorCore.PIPLayoutSettings)
}
extension BanubaSdkSimple.BanubaSimpleCameraModule {
  @objc dynamic public func startMultiCamMixing(isPresenterMode: Swift.Bool, completion: (() -> Swift.Void)?)
  @objc dynamic public func stopMultiCamMixing(completion: (() -> Swift.Void)?)
}
extension BanubaSdkSimple.BanubaSimpleCameraModule : BanubaVideoEditorCore.CameraModule {
  @objc dynamic public var renderQueue: Dispatch.DispatchQueue? {
    @objc get
  }
  public var pipRenderSize: CoreFoundation.CGSize {
    get
  }
  @objc dynamic public var autoStart: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var isPIPPlayerReadyToProvideData: Swift.Bool {
    @objc get
  }
  @objc dynamic public var currentPiPVideoTime: CoreMedia.CMTime {
    @objc get
  }
  @objc dynamic public func setMaxFaces(facesCount: Swift.Int32)
  @objc dynamic public func destroy()
  @objc dynamic public func start(completion: @escaping () -> Swift.Void)
  @objc dynamic public func stop(completion: (() -> Swift.Void)?)
  @objc dynamic public func setRenderTarget(view: UIKit.UIView)
  @objc dynamic public func removeRenderTarget()
  @objc dynamic public func setup()
  @objc dynamic public func addFPSListener(_ listener: ((_ fpsInfo: Foundation.NSAttributedString) -> Swift.Void)?)
  @objc dynamic public func takeSnapshot(isFrontCameraMirrored: Swift.Bool, handler: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc dynamic public func getRendererView() -> UIKit.UIView
  @objc dynamic public func startRenderLoop()
  @objc dynamic public func stopRenderLoop()
}
extension BanubaSdkSimple.BanubaSimpleCameraModule : BanubaVideoEditorCore.SDKInputServicing {
  @objc dynamic public func setCameraSessionType(_ type: BanubaVideoEditorCore.CameraModuleSessionType)
  @objc dynamic public var zoomFactor: Swift.Float {
    @objc get
  }
  @objc dynamic public var defaultZoom: Swift.Float {
    @objc get
  }
  @objc dynamic public var isFrontCamera: Swift.Bool {
    @objc get
  }
  @objc dynamic public var currentCameraSessionType: BanubaVideoEditorCore.CameraModuleSessionType {
    @objc get
  }
  @objc dynamic public var isMultiCamSupported: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isMultiCamEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public func focus(at point: CoreFoundation.CGPoint, useContinuousDetection: Swift.Bool)
  @objc dynamic public func setZoomFactor(_ zoomFactor: Swift.Float) -> Swift.Float
  @objc dynamic public func toggleCamera(completion: @escaping () -> ())
  @objc dynamic public func startCamera()
  @objc dynamic public func startAudioCapturing()
  @objc dynamic public func stopAudioCapturing()
  @objc dynamic public func setTorch(mode: AVFoundation.AVCaptureDevice.TorchMode) -> AVFoundation.AVCaptureDevice.TorchMode
  @objc dynamic public func toggleTorch() -> AVFoundation.AVCaptureDevice.TorchMode
}
extension BanubaSdkSimple.BanubaSimpleCameraModule : BanubaVideoEditorCore.SDKOutputServicing {
  @objc dynamic public var isRecording: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isEnoughDiskSpaceForRecording: Swift.Bool {
    @objc get
  }
  @objc dynamic public func startVideoCapturing(fileURL: Foundation.URL?, startTimeForVideoTexture: Swift.Double, externalAudioConfiguration: BanubaVideoEditorCore.ExternalAudioConfiguration?, progress: @escaping (CoreMedia.CMTime) -> Swift.Void, didStart: (() -> Swift.Void)?, shouldSkipFrame: (() -> Swift.Bool)?, periodicProgressTimeInterval: Foundation.TimeInterval, totalDuration: Foundation.TimeInterval, itemDuration: Foundation.TimeInterval, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc dynamic public func stopVideoCapturing(cancel: Swift.Bool)
}
extension BanubaSdkSimple.BanubaSimpleCameraModule : BanubaVideoEditorCore.SDKEffectsServicing {
  @objc dynamic public var isMaskLoaded: Swift.Bool {
    @objc get
  }
  @objc dynamic public func enableBlur()
  @objc dynamic public func effectDidBeginApplying()
  @objc dynamic public func effectDidEndApplying()
  @objc dynamic public func effectDidResetApplying()
  @objc dynamic public func effectDidChangeState()
  @objc dynamic public func callEffectMethod(_ method: Swift.String)
  @objc dynamic public func effectAddImageTexture(image: UIKit.UIImage, backgroundColor: UIKit.UIColor)
  @objc dynamic public func stopVideoTextureIfNeeded()
  @objc dynamic public func effectAddVideoTexture(asset: AVFoundation.AVURLAsset, backgroundColor: UIKit.UIColor)
  @objc dynamic public func unloadEffectTexture()
  @objc dynamic public func effectReloadTexturePreview(startTime: Foundation.TimeInterval, endTime: Foundation.TimeInterval, itemDuration: Foundation.TimeInterval)
  @objc dynamic public func effectsPaths() -> [Swift.String]
  @objc dynamic public func loadMask(name: Swift.String, synchronous: Swift.Bool)
  @objc dynamic public func unloadMask()
  @objc dynamic public func removeAllFilters()
  @objc dynamic public func applyFilter(_ filter: any BanubaVideoEditorCore.RenderEffect)
  @objc dynamic public func removeFilter(_ filter: any BanubaVideoEditorCore.RenderEffect)
  @objc dynamic public func setDoubleTapGestureEnabled(_ isEnabled: Swift.Bool)
}
extension BanubaSdkSimple.BanubaSimpleCameraModule : BanubaVideoEditorCore.SDKBeautyEffectManaging {
  @objc dynamic public var isBeautyEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var intensity: Swift.Double {
    @objc get
    @objc set
  }
  @objc dynamic public func enableBeauty() async
  @objc dynamic public func disableBeauty()
  @objc dynamic public func resetIntensity()
}
extension BanubaSdkSimple.BanubaSimpleCameraModule : BanubaVideoEditorCore.SDKBackgroundEffectManaging {
  @objc dynamic public var isBackgroundEnabled: Swift.Bool {
    @objc get
  }
  @objc dynamic public var embeddedImages: [BanubaVideoEditorCore.EmbeddedBackgroundImage] {
    @objc get
  }
  @objc dynamic public func enableBackground() async
  @objc dynamic public func enableBackgroundBlur()
  @objc dynamic public func disableBackground()
  @objc dynamic public func setCameraVideoFrame(_ frame: CoreFoundation.CGRect)
  @objc dynamic public func resetCameraVideoFrame()
}
extension BanubaSdkSimple.BanubaSimpleCameraModule {
  public func willOutput(pixelBuffer: CoreVideo.CVPixelBuffer)
}
@objc public enum RenderContentMode : Swift.Int {
  case resizeAspect
  case resizeAspectFill
  case resize
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol SnapshotProvider {
  func makeSnapshotWithSettings(_ settings: BanubaVideoEditorCore.VEOutputSettings, watermarkPixelBuffer: CoreVideo.CVPixelBuffer?) -> UIKit.UIImage?
}
public protocol PixelBufferProvider {
  func makeVideoPixelBuffer() -> CoreVideo.CVPixelBuffer?
}
@_hasMissingDesignatedInitializers @objc public class RenderTarget : BanubaSdkSimple.PIPShapeDrawer, BanubaSdkSimple.SnapshotProvider, BanubaSdkSimple.PixelBufferProvider {
  public var renderBehaviour: BanubaSdkSimple.RenderBehavior
  public var pipPlayer: BanubaSdkSimple.PIPPlayer?
  public var pipPlayerRelativeLeftTopPoint: CoreFoundation.CGPoint
  public var splitRenderOffset: CoreFoundation.CGPoint
  public var playerRect: CoreFoundation.CGRect {
    get
  }
  public var pipRect: CoreFoundation.CGRect? {
    get
  }
  public var shouldZoomPipImage: Swift.Bool
  public func setSplitRender(rect: CoreFoundation.CGRect, offset: CoreFoundation.CGPoint)
  @objc public func makeVideoPixelBuffer() -> CoreVideo.CVPixelBuffer?
  @objc public func makeSnapshotWithSettings(_ settings: BanubaVideoEditorCore.VEOutputSettings, watermarkPixelBuffer: CoreVideo.CVPixelBuffer?) -> UIKit.UIImage?
  @objc public func activate()
  @objc public func present(_ willPresentHandler: ((CoreVideo.CVPixelBuffer?) -> Swift.Void)?)
  @objc deinit
}
extension BanubaSdkSimple.EffectPlayerRenderMode : Swift.Equatable {}
extension BanubaSdkSimple.EffectPlayerRenderMode : Swift.Hashable {}
extension BanubaSdkSimple.EffectPlayerVideoSize : Swift.Equatable {}
extension BanubaSdkSimple.EffectPlayerVideoSize : Swift.Hashable {}
extension BanubaSdkSimple.WatermarkCornerPosition : Swift.Equatable {}
extension BanubaSdkSimple.WatermarkCornerPosition : Swift.Hashable {}
extension BanubaSdkSimple.WatermarkCornerPosition : Swift.RawRepresentable {}
extension BanubaSdkSimple.RenderBehavior : Swift.Equatable {}
extension BanubaSdkSimple.RenderBehavior : Swift.Hashable {}
extension BanubaSdkSimple.CameraSessionType : Swift.Equatable {}
extension BanubaSdkSimple.CameraSessionType : Swift.Hashable {}
extension BanubaSdkSimple.CameraSessionType : Swift.RawRepresentable {}
extension BanubaSdkSimple.RenderContentMode : Swift.Equatable {}
extension BanubaSdkSimple.RenderContentMode : Swift.Hashable {}
extension BanubaSdkSimple.RenderContentMode : Swift.RawRepresentable {}
